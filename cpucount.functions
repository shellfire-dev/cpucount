# Finds number of hyperthreaded CPUs (ie double number of CPUs) - ignores cpuset, etc
core_dependency_requiresProgram sysctl macosx bsd
cpucount_discoveredNumberOfCpus=0
cpucount_findNumberOfHyperthreadedCpus()
{
	# Should work under Linux and Cygwin
	if [ -f /proc/cpuinfo ]; then
		cpucount_discoveredNumberOfCpus="$(grep --extended-regexp --count '^processor[[:space:]]*:[[:space:]]' /proc/cpuinfo)"
		return 0
	fi
	
	case "$core_dependency_osFamily" in
		
		macosx|bsd)
			# Works on MacOS X, FreeBSD, OpenBSD: also hw.logicalcpu
			cpucount_discoveredNumberOfCpus="$(sysctl -n hw.ncpu)"
		;;
		
		windows)
			if [ -z "$NUMBER_OF_PROCESSORS" ]; then
				core_exitError "Determining CPU count is not known for osFamily '$osFamily' when NUMBER_OF_PROCESSORS is unset"
			fi
			cpucount_discoveredNumberOfCpus="$NUMBER_OF_PROCESSORS"
		;;
		
		*)
			# might be psrinfo -p / -v, or kstat cpu_info for solaris
			core_exitError "Determining CPU count is not known for osFamily '$osFamily'"
		;;
		
	esac
}

cpucount_makeJobs=1
cpucount_makeLoadAverage=1.00
cpucount_computeMakeJobsAndLoadAverage()
{
	# converts strings to 0, ie 'max' goes to 0
	local -i configuredCpuCount=$1
	local -i configuredLoadAverageCorrection=$2
	cpucount_findNumberOfHyperthreadedCpus
	
	if [ $configuredCpuCount -eq 0 ]; then
		cpucount_makeJobs=$cpucount_discoveredNumberOfCpus
	elif [ $configuredCpuCount -lt 0 ]; then
		# reduce number of cpus
		local -i potentialCpus=$((cpucount_discoveredNumberOfCpus + configuredCpuCount))
		if [ $potentialCpus -lt 1 ]; then
			cpucount_makeJobs=1
		else
			cpucount_makeJobs=$potentialCpus
		fi
	else
		cpucount_makeJobs=$cpucount_discoveredNumberOfCpus
	fi
	
	if [ $configuredLoadAverageCorrection -eq 0 ]; then
		cpucount_makeLoadAverage="${cpucount_makeJobs}.00"
	else
		local -i remainingLoadAveragePercentage=$((100 - configuredLoadAverageCorrection))
		local -i reducedCpus=$((cpucount_makeJobs - 1))
		cpucount_makeLoadAverage="${reducedCpus}.${remainingLoadAveragePercentage}"
	fi
}
