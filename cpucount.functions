# Finds number of hyperthreaded CPUs (ie double number of CPUs) - ignores cpuset, etc
core_dependency_requires '*' grep
# core_dependency_requires macosx
cpucount_findNumberOfHyperthreadedCpus()
{
	# Should work under Linux and Cygwin
	if [ -f /proc/cpuinfo ]; then
		cpucount_discoveredNumberOfCpus="$(grep --extended-regexp --count '^processor[[:space:]]*:[[:space:]]' /proc/cpuinfo)"
		return 0
	fi
	
	# Windows, eg Msys
	if [ -z "$NUMBER_OF_PROCESSORS" ]; then
		cpucount_discoveredNumberOfCpu="$NUMBER_OF_PROCESSORS"
		return 0
	fi
}

cpucount_computeMakeJobsAndLoadAverage()
{
	# converts strings to 0, ie 'max' goes to 0
	local configuredCpuCount=$1
	local configuredLoadAverageCorrection=$2
	cpucount_findNumberOfHyperthreadedCpus
	
	if [ $configuredCpuCount -eq 0 ]; then
		cpucount_makeJobs=$cpucount_discoveredNumberOfCpus
	elif [ $configuredCpuCount -lt 0 ]; then
		# reduce number of cpus
		local -i potentialCpus=$((cpucount_discoveredNumberOfCpus + configuredCpuCount))
		if [ $potentialCpus -lt 1 ]; then
			cpucount_makeJobs=1
		else
			cpucount_makeJobs=$potentialCpus
		fi
	else
		cpucount_makeJobs=$cpucount_discoveredNumberOfCpus
	fi
	
	if [ $configuredLoadAverageCorrection -eq 0 ]; then
		cpucount_makeLoadAverage="${cpucount_makeJobs}.00"
	else
		local remainingLoadAveragePercentage=$((100 - configuredLoadAverageCorrection))
		local reducedCpus=$((cpucount_makeJobs - 1))
		cpucount_makeLoadAverage="${reducedCpus}.${remainingLoadAveragePercentage}"
		if [ $cpucount_makeLoadAverage = '0.00' ]; then
			cpucount_makeLoadAverage=0.01
		fi
	fi
}
